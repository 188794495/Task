<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:context="http://www.springframework.org/schema/context"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
">

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:properties/*.properties" />

    <context:component-scan base-package="com.ptteng.dao"/>

    <!-- 数据库 -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
    </bean>

    <!-- 让spring管理sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!--mapper文件位置-->
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis/mybatis.xml"></property>
    </bean>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ptteng.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <!-- 具体dao层包的位置在哪，视你新建的dao层java包而定 -->


    <!-- spring 集成缓存服务器（memcached） -->
    <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"
          factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
        <!--构造函数-->
        <constructor-arg>
            <value>memCachedPool</value>
        </constructor-arg>
        <!--可以配置多服务器负载均衡-->
        <property name="servers">
            <list>
                <value>${memcache.server}</value>
            </list>
        </property>

        <!-- 每台服务器的初始连接 -->

        <property name="initConn">
            <value>${memcache.initConn}</value>
        </property>
        <!-- 每台服务器的最小连接 -->
        <property name="minConn">
            <value>${memcache.minConn}</value>
        </property>
        <!-- 每台服务器的最大连接 -->
        <property name="maxConn">
            <value>${memcache.maxConn}</value>
        </property>

        <!--主线程睡眠时间-->
        <property name="maintSleep">
            <value>${memcache.maintSleep}</value>
        </property>

        <!--Tcp/Socket 的参数, 如果是true在写数据时不会缓冲, 会立即发出-->
        <property name="nagle">
            <value>${memcache.nagle}</value>
        </property>
        <!--连接超时/阻塞读取时间的超时时间-->
        <property name="socketTO">
            <value>${memcache.socketTO}</value>
        </property>
    </bean>

    <bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
        <constructor-arg>
            <value>memCachedPool</value>
        </constructor-arg>
    </bean>





</beans>
