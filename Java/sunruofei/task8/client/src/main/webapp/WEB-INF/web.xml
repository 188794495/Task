<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="WebApp_ID" version="3.0">
  <display-name>Archetype Created Web Application</display-name>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!-- 初始化spring容器 -->
  <!--用来指定Spring要加载的配置文件,在项目启动前就加载spring的一些配置,
  比如链接数据库,创建context,让bean有了呆着的空间-->
<context-param>
  <param-name>contextConfigLocation</param-name>
  <param-value>classpath:spring-mvc.xml</param-value>
</context-param>
<!--起真正初始化的作用-->
  <!--ContextLoaderListener初始化，实例化IoC容器，并将此容器实例注册到ServletContext中-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>



  <!--监听在线人数-->
  <listener>
    <listener-class>com.ptteng.utils.Listener</listener-class>
  </listener>
  <session-config>
    <session-timeout>1</session-timeout>
  </session-config>



  <!--
    配置 org.springframework.web.filter.HiddenHttpMethodFilter: 可以把 POST 请求转为 DELETE 或 put 请求  -->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>MyFilter</filter-name>
    <filter-class>com.ptteng.utils.MyFilter</filter-class>
  </filter>
  <!--元素用于设置一个 Filter 所负责拦截的资源。
   一个Filter拦截的资源可通过两种方式来指定：
   Servlet 名称和资源访问的请求路径-->
  <filter-mapping>
    <!--子元素用于设置filter的注册名称。
    该值必须是在<filter>元素中声明过的过滤器的名字-->
    <filter-name>MyFilter</filter-name>
    <!--设置 filter 所拦截的请求路径(过滤器关联的URL样式)-->
    <url-pattern>/*</url-pattern>
  </filter-mapping>



  <!-- spring-mvc的前端控制器,即DispatcherServlet -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--指定springmvc配置文件-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <!--1表示web容器（tomcat）启动时，servlet的优先级，这里的servlet就是指DispatcherServlet,加载时创建-->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!--映射所有的HTTP请求到DispatcherServlet-->
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>


  <jsp-config >
    <taglib >
      <taglib-uri> /tags</taglib-uri >
      <taglib-location> /WEB-INF/dateTag.tld</taglib-location >
    </taglib >
  </jsp-config >


</web-app>
